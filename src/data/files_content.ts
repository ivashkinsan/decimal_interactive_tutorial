export const filesContent = {
  'file_structure': {
    id: 'file_structure',
    title: 'Структура файлов проекта',
    simple: 'Проект s21_decimal разбит на отдельные файлы и папки, чтобы было легче найти нужный код, тестировать его и работать над проектом командой.',
    why: 'Хорошая структура проекта помогает избежать беспорядка, упрощает отладку и позволяет разным разработчикам работать над разными частями кода одновременно, не мешая друг другу. Это основа для любого большого проекта.',
    description: 'Обзор организации файлов в проекте s21_decimal, объясняющий принципы модульности, разделения ответственности и удобства сопровождения.',
    template: `
      <h3>Организация проекта</h3>
      <p>Проект <code>s21_decimal</code> организован для удобства разработки, тестирования и дальнейшего сопровождения. Каждый компонент или группа связанных функций вынесены в отдельные файлы, что способствует модульности и чистоте кода.</p>
      <h4>Основные директории и файлы:</h4>
      <ul>
        <li><code>src/</code>: <b>Исходный код библиотеки.</b> Здесь находятся все <code>.c</code> и <code>.h</code> файлы, реализующие логику <code>s21_decimal</code>.</li>
        <li><code>src/tests/</code>: <b>Модульные тесты.</b> Для каждой функции библиотеки написаны тесты, которые проверяют ее корректность. Это критически важно для обеспечения надежности финансовых расчетов.</li>
        <li><code>src/s21_decimal.h</code>: <b>Основной заголовочный файл.</b> Определяет структуру <code>s21_decimal</code> и объявляет все публичные функции библиотеки. Это своего рода "контракт" библиотеки.</li>
        <li><code>Makefile</code>: <b>Сборка и управление проектом.</b> Этот файл содержит инструкции для компилятора, как собрать проект, запустить тесты, сгенерировать отчеты и т.д. Он автоматизирует рутинные задачи.</li>
      </ul>
      <h4>Ключевые файлы в <code>src/</code> (сгруппированы по функционалу):</h4>
      
      <h5>Арифметические операции</h5>
      <ul>
        <li><code>s21_add.c</code></li>
        <li><code>s21_sub.c</code></li>
        <li><code>s21_mul.c</code></li>
        <li><code>s21_div.c</code></li>
      </ul>

      <h5>Операции сравнения</h5>
      <ul>
        <li><code>s21_is_less.c</code></li>
        <li><code>s21_is_less_or_equal.c</code></li>
        <li><code>s21_is_greater.c</code></li>
        <li><code>s21_is_greater_or_equal.c</code></li>
        <li><code>s21_is_equal.c</code></li>
        <li><code>s21_is_not_equal.c</code></li>
      </ul>

      <h5>Функции преобразования</h5>
      <ul>
        <li><code>s21_from_int_to_decimal.c</code></li>
        <li><code>s21_from_float_to_decimal.c</code></li>
        <li><code>s21_from_decimal_to_int.c</code></li>
        <li><code>s21_from_decimal_to_float.c</code></li>
      </ul>

      <h5>Прочие функции</h5>
      <ul>
        <li><code>s21_truncate.c</code></li>
        <li><code>s21_negate.c</code></li>
        <li><code>s21_round.c</code></li>
        <li><code>s21_floor.c</code></li>
      </ul>

      <h5>Вспомогательные (внутренние) функции</h5>
      <p>Кроме основных файлов, проект содержит множество вспомогательных функций (например, <code>s21_normalize.c</code>, <code>s21_add_mantissa.c</code>), которые используются внутри основных для выполнения низкоуровневых операций.</p>

      <p>Интерактивный проводник файлов ниже поможет вам изучить содержимое этих файлов.</p>
    `,
    interactive: 'file_explainer',
  },
};
