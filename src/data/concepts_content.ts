export const conceptsContent = {
  'introduction': {
    id: 'introduction',
    title: 'Введение в s21_decimal',
    simple: 's21_decimal - это специальный тип чисел для очень точных расчетов, например, в банках. Он не делает ошибок округления, как обычные числа с запятой.',
    why: 'Обычные числа с плавающей запятой (как `float` или `double`) иногда дают неточные результаты при расчетах с деньгами. s21_decimal создан, чтобы избежать таких ошибок и всегда давать точный ответ.',
    description: 'Этот раздел знакомит с основами работы с типом данных s21_decimal, объясняя его необходимость и ключевые преимущества перед стандартными типами с плавающей запятой.',
    template: `
      <h3>Что такое s21_decimal?</h3>
      <p><code>s21_decimal</code> — это пользовательский тип данных, разработанный для выполнения финансовых и других критически важных расчетов, где требуется абсолютная точность. В отличие от стандартных типов с плавающей запятой (<code>float</code>, <code>double</code>), которые могут вносить ошибки округления из-за особенностей двоичного представления десятичных дробей, <code>s21_decimal</code> гарантирует точное хранение и обработку десятичных чисел.</p>
      <p>Представьте, что вы работаете в банке. Каждая копейка должна быть учтена идеально. Если из-за округления теряется даже малая часть суммы, это может привести к большим проблемам. <code>s21_decimal</code> решает эту проблему, представляя числа таким образом, чтобы десятичные дроби хранились без потерь.</p>
      <h4>Пример проблемы с <code>float</code></h4>
      <pre><code class="c">
// 0.1 + 0.2 в стандартном float не равно 0.3
if (0.1f + 0.2f == 0.3f) {
    // Этот код может не выполниться!
} else {
    // Результат будет примерно 0.30000001192092896
}
      </code></pre>
      <p><code>s21_decimal</code> решает эту проблему, работая с числами в десятичном представлении на уровне битов.</p>
      <h4>Основные характеристики:</h4>
      <ul>
        <li><b>Точность:</b> Позволяет хранить числа с высокой точностью (до 28 знаков после запятой) без потери данных, что критически важно для финансовых операций.</li>
        <li><b>Диапазон:</b> Поддерживает широкий диапазон значений, от очень малых до очень больших чисел.</li>
        <li><b>Отсутствие ошибок округления:</b> Главное преимущество — избегание неточных представлений десятичных дробей, что исключает накопление ошибок при многократных вычислениях.</li>
        <li><b>Контроль масштаба:</b> Позволяет управлять количеством знаков после запятой, что важно для форматирования и специфических требований к точности.</li>
      </ul>
      <p>Понимание того, как работает <code>s21_decimal</code>, поможет вам писать надежный код для задач, требующих высокой точности.</p>
    `,
  },
  'representation': {
    id: 'representation',
    title: 'Представление s21_decimal',
    description: 'Как число s21_decimal хранится в памяти.',
    template: `
      <h3>Внутреннее представление</h3>
      <p>Тип <code>s21_decimal</code> обычно реализуется как структура, содержащая несколько 32-битных целых чисел. Например, 128-битное десятичное число может быть представлено четырьмя <code>int</code>:</p>
      <pre><code class="c">
// Определение структуры в s21_decimal.h
typedef struct s21_decimal {
    int bits[4];
} s21_decimal;

// Пример создания числа 123.45
s21_decimal my_decimal;
s21_from_float_to_decimal(123.45f, &my_decimal);
      </code></pre>
      <ul>
        <li><code>bits[0]</code>, <code>bits[1]</code>, <code>bits[2]</code>: Хранят 96-битную мантиссу числа.</li>
        <li><code>bits[3]</code>: Содержит информацию о знаке и масштабе (степени).
          <ul>
            <li>Биты 0-15: Не используются.</li>
            <li>Биты 16-23: Хранят степень (scale) от 0 до 28.</li>
            <li>Биты 24-30: Не используются.</li>
            <li>Бит 31: Хранит знак (0 для положительного, 1 для отрицательного).</li>
          </ul>
        </li>
      </ul>
      <p>Это позволяет хранить числа в диапазоне от ±0 до ±7.9228 x 10^28 с 28 знаками после запятой.</p>
    `,
    interactive: 'representation_explorer',
  },
};
