export const conversionContent = {
  'conversion_functions': {
    id: 'conversion_functions',
    title: 'Функции преобразования',
    simple: 'Функции преобразования позволяют превращать числа `s21_decimal` в обычные целые или дробные числа, и наоборот. Это нужно, чтобы `s21_decimal` мог "общаться" с другими частями программы.',
    why: 'Часто `s21_decimal` используется только для внутренних расчетов, а для ввода/вывода или взаимодействия с другими библиотеками нужны стандартные типы данных. Функции преобразования обеспечивают этот "перевод" между форматами, сохраняя точность там, где это возможно.',
    description: 'В этом разделе рассматриваются функции, предназначенные для преобразования чисел типа `s21_decimal` в стандартные типы данных (например, `int`, `float`) и обратно. Объясняется логика работы этих функций, включая обработку точности, масштаба и возможных ошибок.',
    template: `
      <h3>Преобразование типов</h3>
      <p>Библиотека <code>s21_decimal</code> предоставляет функции для преобразования десятичных чисел в стандартные типы данных (например, <code>int</code>, <code>float</code>) и обратно. Это необходимо для взаимодействия с другими частями программы, которые могут использовать стандартные числовые типы.</p>
      <h4>Пример использования:</h4>
      <pre><code class="c">
#include "s21_decimal.h"
#include <stdio.h>

int main() {
    s21_decimal dec_val;
    int int_val = 12345;

    // Преобразуем int в s21_decimal
    s21_from_int_to_decimal(int_val, &dec_val);

    int result_int;
    // Преобразуем s21_decimal обратно в int
    s21_from_decimal_to_int(dec_val, &result_int);

    printf("Результат: %d\n", result_int); // Вывод: 12345

    return 0;
}
      </code></pre>
      <h4>Логика реализации <code>s21_from_float_to_decimal</code>: Мышление программиста</h4>
      <ol>
        <li><b>Обработка особых случаев.</b> Сначала разберемся с простыми вещами: если входной float — 0, то и результат — нулевой s21_decimal. Если float — NaN, бесконечность или слишком большое/маленькое число, его нельзя представить в s21_decimal, поэтому возвращаем ошибку.</li>
        <li><b>Знак.</b> Определяем знак числа. Если оно отрицательное, ставим знаковый бит в <code>bits[3]</code> и дальше работаем с абсолютным значением числа.</li>
        <li><b>Превращение в целое.</b> Основная задача — избавиться от дробной части. Я буду умножать float на 10 в цикле, пока он не станет целым. Каждое умножение я буду считать, это и будет мой <code>scale</code>.</li>
        <li><b>Ограничения.</b> Цикл не может быть бесконечным. Во-первых, <code>scale</code> не может быть больше 28. Во-вторых, мантисса не может превышать 96 бит. Я должен добавить проверки на каждом шаге цикла, чтобы не выйти за эти пределы. Также нужно помнить о неточности float и проверять, что число действительно стало целым, с небольшой погрешностью.</li>
        <li><b>Запись результата.</b> Когда цикл завершен, у меня есть целочисленная мантисса и <code>scale</code>. Я записываю их в структуру <code>s21_decimal</code>.</li>
      </ol>
      <h4>Логика реализации <code>s21_from_decimal_to_int</code>: Мышление программиста</h4>
      <ol>
        <li><b>Убрать дробную часть.</b> Преобразование в int по сути своей — это отбрасывание дробной части. Для этого у меня уже есть функция <code>s21_truncate</code>. Я просто вызову ее для входного s21_decimal.</li>
        <li><b>Проверка диапазона.</b> После отбрасывания дробной части, получившееся число все еще может быть слишком большим, чтобы поместиться в обычный <code>int</code>. Я должен сравнить мантиссу усеченного s21_decimal с максимальным значением для <code>int</code> (2,147,483,647). Если она больше, я должен вернуть ошибку.</li>
        <li><b>Извлечение значения.</b> Если число помещается в <code>int</code>, я просто извлекаю значение мантиссы из <code>bits[0]</code> (так как после truncate старшие биты будут нулевыми) и применяю знак.</li>
      </ol>
      <p>Интерактивный симулятор ниже наглядно демонстрирует логику работы этих функций.</p>
    `,
    interactive: 'conversion_simulator',
  },
};
