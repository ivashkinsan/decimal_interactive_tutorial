export const bankersRoundingContent = {
  'bankers_rounding': {
    id: 'bankers_rounding',
    title: 'Банковское округление',
    description: 'Принцип банковского округления (округление до ближайшего четного).',
    template: `
      <h3>Банковское округление (Round Half to Even)</h3>
      <p>Банковское округление, также известное как "округление до ближайшего четного" (Round Half to Even), является методом округления, который часто используется в финансовых расчетах для минимизации накопления ошибок округления.</p>
      <h4>Пример использования:</h4>
      <pre><code class="c">
#include "s21_decimal.h"
#include <stdio.h>

int main() {
    s21_decimal val1, val2, res1, res2;
    s21_from_float_to_decimal(2.5f, &val1);
    s21_from_float_to_decimal(3.5f, &val2);

    s21_round(val1, &res1); // Результат будет 2
    s21_round(val2, &res2); // Результат будет 4

    float float_res1, float_res2;
    s21_from_decimal_to_float(res1, &float_res1);
    s21_from_decimal_to_float(res2, &float_res2);

    printf("2.5 -> %f\n", float_res1); // Вывод: 2.000000
    printf("3.5 -> %f\n", float_res2); // Вывод: 4.000000

    return 0;
}
      </code></pre>
      <h4>Логика реализации <code>s21_round</code>: Мышление программиста</h4>
      <ol>
        <li><b>Цель:</b> Округлить s21_decimal до ближайшего целого.</li>
        <li><b>Подготовка:</b> Сначала нужно получить "чистую" дробную часть. Я возьму исходное число, вычту из него его же, но усеченное (<code>truncate</code>), и получу дробь (например, для 123.45 получу 0.45).</li>
        <li><b>Сравнение с 0.5:</b> Теперь мне нужно сравнить эту дробную часть с 0.5. Я создам s21_decimal для числа 0.5 и использую функцию <code>s21_is_less</code>.</li>
        <li><b>Стандартное округление:</b> Если дробная часть меньше 0.5, я просто усекаю число (округляю вниз). Если она больше 0.5, я добавляю 1 к усеченному числу (округляю вверх). Не забываю про знак: для отрицательных чисел логика будет обратной.</li>
        <li><b>Случай "ровно 0.5":</b> Это и есть банковское округление. Если дробная часть равна 0.5, я смотрю на целую часть числа. Я могу получить ее, применив <code>truncate</code>.</li>
        <li><b>Проверка на четность:</b> Мне нужно проверить, является ли эта целая часть четной. Я могу проверить младший бит мантиссы: если он 0, число четное, если 1 — нечетное.</li>
        <li><b>Принятие решения:</b> Если целая часть нечетная, я округляю вверх (добавляю 1). Если четная — округляю вниз (просто отбрасываю дробную часть).</li>
      </ol>
      <p>Интерактивный симулятор ниже наглядно демонстрирует эту логику.</p>
    `,
    interactive: 'bankers_rounding_simulator',
  },
};
