
export const conceptsContent = {
    'concept_representation': {
        title: 'Концепция: Битовое представление',
        interactive: 'representation_explorer',
        simple: 'Представьте, что s21_decimal — это специальный контейнер для чисел. У него есть три больших отсека для хранения самого числа (мантиссы) и один маленький служебный отсек, где записано, отрицательное ли это число и сколько у него знаков после запятой.',
        why: 'Стандартные типы вроде `float` и `double` хранят числа в двоичном научном формате, что приводит к ошибкам точности (например, 0.1 + 0.2 не равно 0.3). Наш формат хранит число как простое целое и отдельно хранит положение запятой, что гарантирует точность, критически важную для финансовых расчетов.',
        description: 's21_decimal — это структура из 4-х 32-битных `int`. `bits[0]`, `bits[1]`, `bits[2]` образуют единое 96-битное пространство для хранения мантиссы — целого числа без знака. `bits[3]` используется как служебный: биты с 16 по 23 хранят `scale` (степень от 0 до 28, т.е. количество знаков после запятой), а 31-й бит хранит знак (0 — плюс, 1 — минус).',
        steps: [
            {
                title: 'Шаг 1: Структура s21_decimal',
                prologue: '<code>s21_decimal</code> — это, по сути, просто массив из четырех 32-битных целых чисел, который мы называем `bits`.',
                epilogue: 'Думайте об этом как о коробке с четырьмя пронумерованными отсеками: <code>bits[0]</code>, <code>bits[1]</code>, <code>bits[2]</code> и <code>bits[3]</code>. Сейчас они все пусты (равны нулю).'
            },
            {
                title: 'Шаг 2: Мантисса (96 бит)',
                prologue: 'Первые три отсека (`bits[0]`-`bits[2]`) вместе образуют одно огромное 96-битное хранилище для основного числа — мантиссы.',
                epilogue: 'Введите число и посмотрите, как оно разместится в этих трех отсеках. Большие числа займут несколько отсеков.'
            },
            {
                title: 'Шаг 3: Управляющие биты (bits[3])',
                prologue: 'Четвертый отсек, `bits[3]`, — это пульт управления числом. Он хранит знак и масштаб (количество знаков после запятой).',
                epilogue: 'Подвигайте слайдер масштаба и переключите знак, чтобы увидеть, как меняются биты в `bits[3]`.'
            },
            {
                title: 'Шаг 4: Все вместе',
                prologue: 'Теперь посмотрим, как число, например, <code>-123.45</code> будет выглядеть в памяти целиком.',
                epilogue: 'Мантисса становится <code>12345</code>. В `bits[3]` устанавливается бит знака в `1` (минус) и `scale` равный `2` (два знака после запятой).'
            }
        ]
    },
    'concept_normalization': {
        title: 'Концепция: Нормализация',
        interactive: 'normalization_simulator',
        simple: 'Представьте, что вы хотите сложить метры и сантиметры. Вы не можете просто сложить 2 и 30. Сначала нужно привести всё к одной единице, например, к сантиметрам: 200 см + 30 см. Нормализация в decimal — это то же самое: приведение чисел к общему "масштабу" перед операцией.',
        why: 'Арифметические операции (сложение, вычитание, сравнение) над мантиссами можно выполнять только тогда, когда они представляют числа с одинаковым количеством знаков после запятой. Если у одного числа scale 2 (1.23), а у другого 4 (1.2345), их мантиссы (123 и 12345) несопоставимы. Нормализация делает их сопоставимыми.',
        description: 'Нормализация — это процесс уравнивания `scale` у двух `s21_decimal`. Мантисса числа с меньшим `scale` домножается на 10, а его `scale` увеличивается на 1. Этот процесс повторяется до тех пор, пока `scale` обоих чисел не станут равны. Это арифметический, а не побитовый сдвиг, чтобы избежать потери точности.'
    },
    'concept_addition': {
        title: 'Концепция: Сложение больших чисел',
        interactive: 'addition_simulator',
        simple: 'Это обычное сложение в столбик, как в начальной школе. Вы складываете цифры справа налево и, если получается больше 9, переносите единичку в следующий разряд. Здесь то же самое, но вместо десятичных разрядов — 32-битные `int`.',
        why: '96-битная мантисса не помещается в стандартные 64-битные типы C (вроде `unsigned long long`). Мы не можем просто написать `result = mantissa1 + mantissa2`. Поэтому приходится реализовывать алгоритм сложения вручную, работая с 32-битными частями мантиссы.',
        description: 'Сложение 96-битных мантисс происходит поразрядно. Сначала складываются `bits[0]` обоих чисел. Если происходит переполнение (результат больше, чем 2^32 - 1), то "единичка" (перенос) добавляется к результату сложения следующих частей, `bits[1]`. Этот процесс повторяется для всех частей мантиссы, обеспечивая корректное сложение больших чисел.'
    },
};
